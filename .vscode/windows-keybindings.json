// Place your key bindings in this file to override the defaults
[
  // Navigation + selection
  {
    "key": "ctrl+down",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+down",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+pagedown",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+up",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+up",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+left",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+left",
    "command": "cursorHome",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+right",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "alt+right",
    "command": "cursorWordEndRight",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "alt+shift+right",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "meta+right",
    "command": "cursorWordEndRight",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "meta+shift+right",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "alt+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "alt+shift+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "meta+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "meta+shift+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  // Deletion
  {
    "key": "alt+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "meta+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "meta+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "deleteAllLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+delete",
    "command": "deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  // Copied from mac and re-mapped
  {
    "key": "ctrl+b",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "shift+ctrl+[",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "shift+ctrl+]",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "alt+ctrl+left",
    "command": "editor.fold",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+ctrl+right",
    "command": "editor.unfold",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+\\", // Matches Chrome
    "command": "workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+'",  // Matches Chrome
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode"
  },
  //     {
  //     "key": "win+shift+left",
  //     "command": "workbench.action.moveEditorLeftInGroup"
  // },
  {
    "key": "ctrl+shift+pageup",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  //     {
  //     "key": "win+shift+right",
  //     "command": "workbench.action.moveEditorRightInGroup"
  // },
  {
    "key": "ctrl+shift+pagedown",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  //     {
  //     "key": "ctrl+shift+up",
  //     "command": "editor.action.insertCursorAbove",
  //     "when": "editorTextFocus"
  // },
  //     {
  //     "key": "ctrl+shift+down",
  //     "command": "editor.action.insertCursorBelow",
  //     "when": "editorTextFocus"
  // },
  {
    "key": "ctrl+r",
    "command": "workbench.action.tasks.runTask",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.terminal.focusAtIndex1",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.terminal.focusAtIndex2",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.terminal.focusAtIndex3",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.terminal.focusAtIndex4",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.terminal.focusAtIndex5",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.navigateBack",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.navigateForward",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+g",
    "command": "multiCommand.openMaxBash",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+g",
    // "command": "multiCommand.closeMaxBash", // This doesn't work on the pi.
    "command": "workbench.action.togglePanel",
    "when": "terminalFocus"
  },
  {
    "key": "enter",
    "command": "multiCommand.openFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "multiCommand.showFileInSideBar",
    "when": "editorTextFocus"
  },
  {
    "key": "escape",
    "command": "multiCommand.escapeGlobalSearch",
    "when": "searchViewletVisible && searchInputBoxFocus || searchViewletVisible && inputBoxFocus && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "ctrl+q ctrl+q",
    "command": "workbench.action.quit"
  },
  // Replaces ctrl+. to open quick fixes (useful for adding "using ...;")
  {
    "key": "alt+.",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  // Don't steal ctrl+e in the terminal. ctrl+p already is quickOpen.
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
]
